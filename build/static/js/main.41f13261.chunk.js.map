{"version":3,"sources":["components/Note.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","content","onClick","axios","get","then","response","data","newObject","post","id","put","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","useEffect","noteService","initialNotes","notesToShow","filter","map","i","key","find","n","changedNote","returnedNote","catch","error","alert","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","length","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"sMAceA,EAZF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACdC,EAAQF,EAAKG,UACf,qBAAuB,iBAE3B,OACE,4BACGH,EAAKI,QACN,4BAAQC,QAASJ,GAAmBC,K,gBCS3B,EAfA,WAEZ,OADeI,IAAMC,IAHR,cAIEC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAa7B,EAVA,SAAAC,GAEb,OADgBL,IAAMM,KARR,aAQsBD,GACrBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ5B,EALA,SAACG,EAAIF,GAElB,OADgBL,IAAMQ,IAAN,UAbF,aAaE,YAAwBD,GAAMF,GAC/BH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SC4E5BK,EAvFH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,OAEcF,mBAAS,IAFvB,mBAETG,EAFS,KAEAC,EAFA,OAGcJ,oBAAS,GAHvB,mBAGTK,EAHS,KAGAC,EAHA,KAKhBC,qBAAU,WACRC,IAEGhB,MAAK,SAAAiB,GACJP,EAASO,QAEZ,IAEH,IAyCMC,EAAcL,EAChBJ,EACAA,EAAMU,QAAO,SAAA3B,GAAI,OAAIA,EAAKG,aAE9B,OACE,6BACE,qCACA,6BACE,4BAAQE,QAAS,kBAAMiB,GAAYD,KAAnC,QACQA,EAAU,YAAc,QAGlC,4BACGK,EAAYE,KAAI,SAAC5B,EAAM6B,GAAP,OACf,kBAAC,EAAD,CACEC,IAAKD,EACL7B,KAAMA,EACNC,iBAAkB,kBAzCD,SAACY,GAC1B,IAAMb,EAAOiB,EAAMc,MAAK,SAAAC,GAAC,OAAIA,EAAEnB,KAAOA,KAEhCoB,EAAW,eAAQjC,EAAR,CAAcG,WAAYH,EAAKG,YAEhDqB,EACUX,EAAIoB,GACXzB,MAAK,SAAA0B,GACJhB,EAASD,EAAMW,KAAI,SAAA5B,GAAI,OAAIA,EAAKa,KAAOA,EAAKb,EAAOkC,SAGpDC,OAAM,SAAAC,GACLC,MAAM,aAAD,OACUrC,EAAKI,QADf,sCAGLc,EAASD,EAAMU,QAAO,SAAAK,GAAC,OAAIA,EAAEnB,KAAOA,SA0BRyB,CAAmBtC,EAAKa,WAKtD,0BAAM0B,SA/DM,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAa,CACjBtC,QAASe,EACTwB,MAAM,IAAIC,MAAOC,cACjB1C,UAAW2C,KAAKC,SAAW,GAC3BlC,GAAII,EAAM+B,OAAS,GAGrBxB,EACUkB,GACPlC,MAAK,SAAA0B,GACJhB,EAAS,GAAD,mBAAKD,GAAL,CAAWiB,KACnBd,EAAW,SAmDX,2BACE6B,MAAO9B,EACP+B,SA7BiB,SAACV,GACxBpB,EAAWoB,EAAMW,OAAOF,UA8BpB,4BAAQG,KAAK,UAAb,WCjFRC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.41f13261.chunk.js","sourcesContent":["import React from 'react'\n\nconst Note = ({ note, toggleImportance }) => {\n  const label = note.important\n    ? 'make not important' : 'make important'\n\n  return (\n    <li>\n      {note.content} \n      <button onClick={toggleImportance}>{label}</button>\n    </li>\n  )\n}\n\nexport default Note","import axios from 'axios'\nconst baseUrl = '/api/notes'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n   return request.then(response => response.data)\n}\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nexport default { getAll, create, update }","import React, { useState, useEffect } from 'react'\nimport Note from './components/Note'\nimport noteService from './services/notes'\n\nconst App = () => {\n  const [notes, setNotes] = useState([]) \n  const [newNote, setNewNote] = useState('')\n  const [showAll, setShowAll] = useState(true)\n\n  useEffect(() => {\n    noteService\n      .getAll()\n      .then(initialNotes => {\n        setNotes(initialNotes)\n      })\n  }, [])\n\n  const addNote = (event) => {\n    event.preventDefault()\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5,\n      id: notes.length + 1,\n    }\n  \n    noteService\n      .create(noteObject)\n      .then(returnedNote => {\n        setNotes([...notes,returnedNote])\n        setNewNote('')\n      })\n  }\n\n  const toggleImportanceOf = (id) => {\n    const note = notes.find(n => n.id === id)\n    // find note id\n    const changedNote = { ...note, important: !note.important }\n  //  change property of note ...pass all properties but change !note.important\n    noteService\n      .update(id, changedNote)\n      .then(returnedNote => {\n        setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n        // add note change\n      })\n      .catch(error => {\n        alert(\n          `the note '${note.content}' was already deleted from server`\n        )\n        setNotes(notes.filter(n => n.id !== id))   \n          // delete note   \n      })\n  }\n\n  const handleNoteChange = (event) => {\n    setNewNote(event.target.value)\n  }\n\n  const notesToShow = showAll\n    ? notes\n    : notes.filter(note => note.important)\n// consditional const and filter all true \n  return (\n    <div>\n      <h1>Notes</h1>\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all' }\n        </button>\n      </div>      \n      <ul>\n        {notesToShow.map((note, i) => \n          <Note\n            key={i}\n            note={note} \n            toggleImportance={() => toggleImportanceOf(note.id)}\n            // set callback with id\n          />\n        )}\n      </ul>\n      <form onSubmit={addNote}>\n        <input\n          value={newNote}\n          onChange={handleNoteChange}\n        />\n        <button type=\"submit\">save</button>\n      </form>   \n    </div>\n  )\n}\n\nexport default App ","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)"],"sourceRoot":""}